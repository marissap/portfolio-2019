{"version":3,"sources":["webpack:///./src/assets/smileysticker2.svg","webpack:///./src/components/quote.js","webpack:///./src/pages/index.js"],"names":["module","exports","Quote","useEffect","section","document","getElementById","el","till","html","innerHTML","counter","offsetWidth","repeatContent","querySelector","scrollingText","id","BlogIndex","data","location","pos1","pos2","pos3","pos4","dragMouseDown","e","window","event","preventDefault","clientX","clientY","onmouseup","closeDragElement","onmousemove","elementDrag","style","top","offsetTop","left","offsetLeft","onmousedown","dragElement","lang","className","title","keywords","to","position","bottom","right","marginBottom","width","src","SmileySticker","alt","pageQuery"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,8D,4JCuB3C,IAiBeC,EAjBD,WAMV,OAJAC,qBAAU,YAtBd,WACI,IAAIC,EAAUC,SAASC,eAAe,sBAQtC,SAAuBC,EAAIC,GACvB,IAAIC,EAAOF,EAAGG,UACVC,EAAU,EAEd,KAAOJ,EAAGK,YAAcJ,GAAQG,EAAU,KACtCJ,EAAGG,WAAaD,EAChBE,GAAW,EAXnBE,CAFcT,EAAQU,cAAc,mBAEbV,EAAQQ,aAE/B,IAAIL,EAAKH,EAAQU,cAAc,kBAC/BP,EAAGG,UAAYH,EAAGG,UAAYH,EAAGG,UAgB7BK,KACD,IAGC,yBAAKC,GAAG,qBACJ,6BACI,yBAAKA,GAAG,iBACJ,yBAAKA,GAAG,kBAAR,kGAAwH,mCAAxH,S,qBC2DLC,UAjDG,SAAC,GAAuB,EAArBC,KAAsB,IAAhBC,EAAe,EAAfA,SAMzB,OAJAhB,qBAAU,YApCZ,SAAqBI,GACnB,IAAIa,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAOzC,SAASC,EAAcC,IACrBA,EAAIA,GAAKC,OAAOC,OACdC,iBACFN,EAAOG,EAAEI,QACTN,EAAOE,EAAEK,QACTzB,SAAS0B,UAAYC,EACrB3B,SAAS4B,YAAcC,EAGzB,SAASA,EAAYT,IACnBA,EAAIA,GAAKC,OAAOC,OACdC,iBACFR,EAAOE,EAAOG,EAAEI,QAChBR,EAAOE,EAAOE,EAAEK,QAChBR,EAAOG,EAAEI,QACTN,EAAOE,EAAEK,QACTvB,EAAG4B,MAAMC,IAAO7B,EAAG8B,UAAYhB,EAAQ,KACvCd,EAAG4B,MAAMG,KAAQ/B,EAAGgC,WAAanB,EAAQ,KAG3C,SAASY,IACP3B,SAAS0B,UAAY,KACrB1B,SAAS4B,YAAc,KA5BrB5B,SAASC,eAAeC,EAAGS,GAAK,UAClCX,SAASC,eAAeC,EAAGS,GAAK,UAAUwB,YAAchB,EAExDjB,EAAGiC,YAAchB,EAgCjBiB,CAAYpC,SAASC,eAAe,cACnC,IAGD,0BAAMoC,KAAK,KAAKC,UAAU,QACxB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQxB,SAAUA,EAAUyB,MAAM,eAChC,kBAAC,IAAD,CAAKA,MAAM,eAAeC,SAAU,CAAC,OAAD,uBACpC,wBAAIF,UAAU,SAAQ,0BAAMA,UAAU,aAAhB,WAAtB,SACA,yBAAKA,UAAU,eACb,wDACA,0JACA,wIACA,iLAeF,yBAAKA,UAAU,WACb,kBAAC,OAAD,CAAMG,GAAG,UAAT,SACA,kBAAC,OAAD,CAAMA,GAAG,SAAT,QACA,kBAAC,OAAD,CAAMA,GAAG,aAAT,aAGF,yBAAK9B,GAAG,UAAUmB,MAAO,CACnBY,SAAU,WACVC,OAAQ,EACRC,MAAO,IAEX,yBAAKjC,GAAG,gBAAgBmB,MAAO,CAAGe,aAAc,EAAGC,MAAO,SAAWC,IAAKC,IAAeC,IAAI,uBA1CvG,IAmDaC,EAAS","file":"component---src-pages-index-js-9988924bbe4536d7e706.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/smileysticker2-314b7192742d455ae29fdb1163e6cfa6.svg\";","import React, { useEffect } from \"react\"\nimport { Star } from \"phosphor-react\";\n\nfunction scrollingText() {\n    let section = document.getElementById(\"scrolling-section\");\n    let content = section.querySelector(\"#scrolling-text\");\n    \n    repeatContent(content, section.offsetWidth);\n    \n    let el = section.querySelector(\"#scrolling-div\");\n    el.innerHTML = el.innerHTML + el.innerHTML;\n    \n    function repeatContent(el, till) {\n        let html = el.innerHTML;\n        let counter = 0;\n        \n        while (el.offsetWidth < till && counter < 100) {\n            el.innerHTML += html;\n            counter += 1;\n        }\n    }\n}\n\nconst Quote = () => {\n\n    useEffect(() => {\n        scrollingText()\n    }, []);\n\n    return (\n        <div id=\"scrolling-section\">\n            <div>\n                <div id=\"scrolling-div\">\n                    <div id=\"scrolling-text\">\"I want to build something that makes people fall in love.\" - Cameron Howe, Halt and Catch Fire<span>‚ú∑</span> </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Quote","import React, { useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { ThemeToggler } from 'gatsby-plugin-dark-mode'\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Quote from \"../components/quote\"\nimport SmileySticker from \"../assets/smileysticker2.svg\"\n\nfunction dragElement(el) {\n  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n  if (document.getElementById(el.id + \"header\")) {\n    document.getElementById(el.id + \"header\").onmousedown = dragMouseDown;\n  } else {\n    el.onmousedown = dragMouseDown;\n  }\n\n  function dragMouseDown(e) {\n    e = e || window.event;\n    e.preventDefault();\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    document.onmouseup = closeDragElement;\n    document.onmousemove = elementDrag;\n  }\n\n  function elementDrag(e) {\n    e = e || window.event;\n    e.preventDefault();\n    pos1 = pos3 - e.clientX;\n    pos2 = pos4 - e.clientY;\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    el.style.top = (el.offsetTop - pos2) + \"px\";\n    el.style.left = (el.offsetLeft - pos1) + \"px\";\n  }\n\n  function closeDragElement() {\n    document.onmouseup = null;\n    document.onmousemove = null;\n  }\n}\n\nconst BlogIndex = ({ data, location }) => {\n\n  useEffect(() => {\n    dragElement(document.getElementById(\"sticker\"));\n  }, []);\n\n  return (\n    <html lang=\"en\" className=\"home\">\n      <Quote></Quote>\n      <Layout location={location} title=\"{siteTitle}\">\n        <SEO title=\"Marissa Phul\" keywords={[`blog`, `software engineer`]}/>\n        <h1 className=\"title\"><span className=\"underline\">Marissa</span> Phul</h1>\n        <div className=\"title-about\">\n          <p>I am a software engineer.</p>\n          <p>I believe we can create any world we want. I work on products and ideas that embody this spirit of progress and creativity.</p>\n          <p>Currently, I'm finishing my computer science degree and then heading to Twitch to work on infrastructure.</p>\n          <p>I like breaking down complex problems and building from the ground-up to create human-centered systems and bring people together, on and offline.</p>\n        </div>\n            {/* <span className=\"site-accent\"><ThemeToggler>\n                      {({ theme, toggleTheme }) => (\n                          <label style={{ cursor: `pointer`, opacity: 0.8 }}>\n                          <input\n                              style={{ display: `none` }}\n                              type=\"checkbox\"\n                              onChange={e => toggleTheme(e.target.checked ? \"dark\" : \"light\")}\n                              checked={theme === \"dark\"}\n                          />\n                          {theme === \"dark\" ? `‚òÄÔ∏è` : `üåô`}\n                          </label>\n                      )}\n              </ThemeToggler></span> */}\n        <div className=\"buttons\">\n          <Link to=\"/about\">about</Link>\n          <Link to=\"/blog\">blog</Link>\n          <Link to=\"/projects\">projects</Link>           \n        </div>\n\n        <div id=\"sticker\" style={{ \n              position: 'absolute',\n              bottom: 0,\n              right: 8,               \n            }}>\n          <img id=\"stickerheader\" style={{  marginBottom: 0, width: '200px' }} src={SmileySticker} alt=\"Smiley Sticker\" />\n        </div>\n      </Layout>\n    </html>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(limit: 2, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                description\n            }\n          }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}